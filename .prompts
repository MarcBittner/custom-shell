
gitPrompt() {

#  Customize BASH PS1 prompt to show current GIT repository and branch.
#  by Mike Stewart - http://MediaDoneRight.com

#  SETUP CONSTANTS
#  Bunch-o-predefined colors.  Makes reading code easier than escape sequences.
#  I don't remember where I found this.  o_O

# Reset
txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m' # Black - Background
bakred='\e[41m' # Red
bakgrn='\e[42m' # Green
bakylw='\e[43m' # Yellow
bakblu='\e[44m' # Blue
bakpur='\e[45m' # Purple
bakcyn='\e[46m' # Cyan
bakwht='\e[47m' # White

Color_Off="\[\033[0m\]"       # Text Reset

# Regular Colors
Black="\[\033[0;30m\]"        # Black
Red="\[\033[0;31m\]"          # Red
Green="\[\033[0;32m\]"        # Green
Yellow="\[\033[0;33m\]"       # Yellow
Blue="\[\033[0;34m\]"         # Blue
Purple="\[\033[0;35m\]"       # Purple
Cyan="\[\033[0;36m\]"         # Cyan
White="\[\033[0;37m\]"        # White

# Bold
BBlack="\[\033[1;30m\]"       # Black
BRed="\[\033[1;31m\]"         # Red
BGreen="\[\033[1;32m\]"       # Green
BYellow="\[\033[1;33m\]"      # Yellow
BBlue="\[\033[1;34m\]"        # Blue
BPurple="\[\033[1;35m\]"      # Purple
BCyan="\[\033[1;36m\]"        # Cyan
BWhite="\[\033[1;37m\]"       # White

# Underline
UBlack="\[\033[4;30m\]"       # Black
URed="\[\033[4;31m\]"         # Red
UGreen="\[\033[4;32m\]"       # Green
UYellow="\[\033[4;33m\]"      # Yellow
UBlue="\[\033[4;34m\]"        # Blue
UPurple="\[\033[4;35m\]"      # Purple
UCyan="\[\033[4;36m\]"        # Cyan
UWhite="\[\033[4;37m\]"       # White

# Background
On_Black="\[\033[40m\]"       # Black
On_Red="\[\033[41m\]"         # Red
On_Green="\[\033[42m\]"       # Green
On_Yellow="\[\033[43m\]"      # Yellow
On_Blue="\[\033[44m\]"        # Blue
On_Purple="\[\033[45m\]"      # Purple
On_Cyan="\[\033[46m\]"        # Cyan
On_White="\[\033[47m\]"       # White

# High Intensty
IBlack="\[\033[0;90m\]"       # Black
IRed="\[\033[0;91m\]"         # Red
IGreen="\[\033[0;92m\]"       # Green
IYellow="\[\033[0;93m\]"      # Yellow
IBlue="\[\033[0;94m\]"        # Blue
IPurple="\[\033[0;95m\]"      # Purple
ICyan="\[\033[0;96m\]"        # Cyan
IWhite="\[\033[0;97m\]"       # White

# Bold High Intensty
BIBlack="\[\033[1;90m\]"      # Black
BIRed="\[\033[1;91m\]"        # Red
BIGreen="\[\033[1;92m\]"      # Green
BIYellow="\[\033[1;93m\]"     # Yellow
BIBlue="\[\033[1;94m\]"       # Blue
BIPurple="\[\033[1;95m\]"     # Purple
BICyan="\[\033[1;96m\]"       # Cyan
BIWhite="\[\033[1;97m\]"      # White

# High Intensty backgrounds
On_IBlack="\[\033[0;100m\]"   # Black
On_IRed="\[\033[0;101m\]"     # Red
On_IGreen="\[\033[0;102m\]"   # Green
On_IYellow="\[\033[0;103m\]"  # Yellow
On_IBlue="\[\033[0;104m\]"    # Blue
On_IPurple="\[\033[10;95m\]"  # Purple
On_ICyan="\[\033[0;106m\]"    # Cyan
On_IWhite="\[\033[0;107m\]"   # White

# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time12a="\@"
PathShort="\w"
PathFull="\W"
NewLine="\n"
Jobs="\j"


# This PS1 snippet was adopted from code for MAC/BSD I saw from: http://allancraig.net/index.php?option=com_content&view=article&id=108:ps1-export-command-for-git&catid=45:general&Itemid=96
# I tweaked it to work on UBUNTU 11.04 & 11.10 plus made it mo' better

export PS1=$IBlack$Time12h$Color_Off'$(git branch &>/dev/null;\
if [ $? -eq 0 ]; then \
  echo "$(echo `git status` | grep "nothing to commit" > /dev/null 2>&1; \
  if [ "$?" -eq "0" ]; then \
    # @4 - Clean repository - nothing to commit
    echo "'$Green'"$(__git_ps1 " (%s)"); \
  else \
    # @5 - Changes to working tree
    echo "'$IRed'"$(__git_ps1 " {%s}"); \
  fi) '$BYellow$PathShort$Color_Off'\$ "; \
else \
  # @2 - Prompt when not in GIT repo
  echo " '$Yellow$PathShort$Color_Off'\$ "; \
fi)'
}


function __prompt_command {

  local last_status=$?
  timer_stop

  # setup color variables

  color_is_on=
  color_red=
  color_green=
  color_yellow=
  color_blue=
  color_white=
  color_gray=
  color_bg_red=
  color_off=
  color_user=
  color_32=
  color_240=
  color_88=
  color_3=
  color_247=
  color_214=
  color_61=
  color_70=
  color_52=

  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  	color_is_on=true
    color_off="\[$(/usr/bin/tput sgr0)\]"
  	color_red="\[$(/usr/bin/tput setaf 1)\]"
  	color_green="\[$(/usr/bin/tput setaf 2)\]"
  	color_yellow="\[$(/usr/bin/tput setaf 3)\]"
  	color_blue="\[$(/usr/bin/tput setaf 6)\]"
  	color_white="\[$(/usr/bin/tput setaf 7)\]"
  	color_gray="\[$(/usr/bin/tput setaf 8)\]"
    color_32="\[$(/usr/bin/tput setaf 32)\]"
    color_240="\[$(/usr/bin/tput setaf 240)\]"
    color_88="\[$(/usr/bin/tput setaf 88)\]"
    color_3="\[$(/usr/bin/tput setaf 3)\]"
    color_247="\[$(/usr/bin/tput setaf 247)\]"
    color_214="\[$(/usr/bin/tput setaf 214)\]"
    color_61="\[$(/usr/bin/tput setaf 61)\]"
    color_70="\[$(/usr/bin/tput setaf 70)\]"
  	color_52="\[$(/usr/bin/tput setaf 52)\]"
  	color_error="$(/usr/bin/tput setab 1)$(/usr/bin/tput setaf 7)"
  	color_error_off="$(/usr/bin/tput sgr0)"

  	# set user color

  	case `id -u` in
  		0) color_user=$color_red ;;
  		*) color_user=$color_green ;;
  	esac
  fi

  PS1_GIT_BIN=$(which git 2>/dev/null)

  	local PS1_GIT=
  	local PS1_VENV=
  	local GIT_BRANCH=
  	local GIT_DIRTY=
  	local PWDNAME=$PWD

  	# beautify working directory name
  	if [[ "${HOME}" == "${PWD}" ]]; then
  		PWDNAME="~"
  	elif [[ "${HOME}" == "${PWD:0:${#HOME}}" ]]; then
  		PWDNAME="~${PWD:${#HOME}}"
  	fi

  	# parse git status and get git variables
  	if [[ ! -z $PS1_GIT_BIN ]]; then
  		# check we are in git repo
  		local CUR_DIR=$PWD
  		while [[ ! -d "${CUR_DIR}/.git" ]] && [[ ! "${CUR_DIR}" == "/" ]] && [[ ! "${CUR_DIR}" == "~" ]] && [[ ! "${CUR_DIR}" == "" ]]; do CUR_DIR=${CUR_DIR%/*}; done
  		if [[ -d "${CUR_DIR}/.git" ]]; then
  			# 'git repo for dotfiles' fix: show git status only in home dir and other git repos
  			if [[ "${CUR_DIR}" != "${HOME}" ]] || [[ "${PWD}" == "${HOME}" ]]; then
  				# get git branch
  				GIT_BRANCH=$($PS1_GIT_BIN symbolic-ref HEAD 2>/dev/null)
  				if [[ ! -z $GIT_BRANCH ]]; then
  					GIT_BRANCH=${GIT_BRANCH#refs/heads/}

  					# get git status
  					local GIT_STATUS=$($PS1_GIT_BIN status --porcelain 2>/dev/null)
  					[[ -n $GIT_STATUS ]] && GIT_DIRTY=1
  				fi
  			fi
  		fi
  	fi

  	# build b/w prompt for git and virtual env
  	[[ ! -z $GIT_BRANCH ]] && PS1_GIT=" ( ${color_247}git: ${GIT_BRANCH} )"
  	[[ ! -z $VIRTUAL_ENV ]] && PS1_VENV=" (venv: ${VIRTUAL_ENV#$WORKON_HOME})"

  	# calculate prompt length
  	local PS1_length=$((${#USER}+${#HOSTNAME}+${#PWDNAME}+${#PS1_GIT}+${#PS1_VENV}+3))
  	local FILL=

  	# if length is greater, than terminal width
  	if [[ $PS1_length -gt $COLUMNS ]]; then
  		# strip working directory name
  		PWDNAME="...${PWDNAME:$(($PS1_length-$COLUMNS+3))}"
  	else
  		# else calculate fillsize
  		local fillsize=$(($COLUMNS-$PS1_length))
  		FILL=$color_gray
  		while [[ $fillsize -gt 0 ]]; do FILL="${FILL}─"; fillsize=$(($fillsize-1)); done
  		FILL="${FILL}${color_off}"
  	fi

  	if $color_is_on; then
  		# build git status for prompt
  		if [[ ! -z $GIT_BRANCH ]]; then
  			if [[ -z $GIT_DIRTY ]]; then
  				PS1_GIT="[ ${color_247}git: ${color_green}${GIT_BRANCH}${color_off} ]"
  			else
  				PS1_GIT="[  ${color_247}git: ${color_red}${GIT_BRANCH}${color_off} ]"
  			fi
  		fi

  		# build python venv status for prompt
  		[[ ! -z $VIRTUAL_ENV ]] && PS1_VENV=" (venv: ${color_blue}${VIRTUAL_ENV#$WORKON_HOME}${color_off})"
  	fi

     local exit_status

    if [[ ${last_status} -eq 0 ]]; then
      exit_status=$(echo "${color_white}[ ${color_247}Exit: $color_70\$?${color_white} ]")
    elif [[ ${last_status} -eq 1 ]]; then
      exit_status=$(echo "${color_white}[ ${color_247}Exit: $color_red\$?${color_white} ]")
    else
      exit_status=$(echo "${color_white}[ ${color_247}Exit: $color_yellow\$?${color_white} ]")
    fi

  	PS1="${color_32}${USER}${color_off}@${color_32}${HOSTNAME}${color_off}:${color_white}${color_off}${color_214} ${PWDNAME} ${color_white}${color_off}\n${PS1_GIT}${PS1_VENV} $exit_status ${color_white}[ ${color_247}last: $color_70${timer_show} ${color_white}]"'\$ '

  	echo -en "\033[6n" && read -sdR CURPOS
  	[[ ${CURPOS##*;} -gt 1 ]] && echo "${color_error}↵${color_error_off}"

  	# set title
  	echo -ne "\033]0;${USER}@${HOSTNAME}:${PWDNAME}"; echo -ne "\007"

}
